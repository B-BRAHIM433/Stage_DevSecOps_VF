{"ast":null,"code":"// import React, { useState, useEffect, useCallback, useMemo } from 'react';\n\n// function App() {\n//   const [githubUrl, setGithubUrl] = useState('');\n//   const [scans, setScans] = useState([]);\n//   const [currentScan, setCurrentScan] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [ws, setWs] = useState(null);\n//   const [darkMode, setDarkMode] = useState(false);\n//   const [selectedScan, setSelectedScan] = useState(null);\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [filterStatus, setFilterStatus] = useState('all');\n//   const [wsReconnecting, setWsReconnecting] = useState(false);\n//   const [notifications, setNotifications] = useState([]);\n//   const [showNotifications, setShowNotifications] = useState(false);\n//   const [deletingScans, setDeletingScans] = useState(new Set());\n//   const [selectedScansForDeletion, setSelectedScansForDeletion] = useState(new Set());\n//   const [showDeleteConfirm, setShowDeleteConfirm] = useState(null);\n\n//   // Thème\n//   const theme = useMemo(() => ({\n//     bg: darkMode ? '#1a1a1a' : '#f8f9fa',\n//     cardBg: darkMode ? '#2d2d2d' : 'white',\n//     text: darkMode ? '#ffffff' : '#2c3e50',\n//     textMuted: darkMode ? '#a0a0a0' : '#6c757d',\n//     border: darkMode ? '#404040' : '#e1e8ed',\n//     primary: '#3498db',\n//     success: '#27ae60',\n//     warning: '#f39c12',\n//     danger: '#e74c3c'\n//   }), [darkMode]);\n\n//   // Connexion WebSocket avec reconnexion automatique\n//   const connectWebSocket = useCallback(() => {\n//     const websocket = new WebSocket('ws://localhost:3001');\n\n//     websocket.onopen = () => {\n//       console.log('WebSocket connecté');\n//       setWs(websocket);\n//       setWsReconnecting(false);\n//       addNotification('Connexion temps réel établie', 'success');\n//     };\n\n//     websocket.onmessage = (event) => {\n//       const data = JSON.parse(event.data);\n//       if (data.type === 'scan_update') {\n//         setCurrentScan(data.scan);\n//         if (data.scan.status === 'completed') {\n//           addNotification(`Scan terminé pour ${data.scan.repository}`, 'success');\n//           fetchScans();\n//           // Notification navigateur\n//           if ('Notification' in window && Notification.permission === 'granted') {\n//             new Notification('Scan terminé', {\n//               body: `Le scan de ${data.scan.repository} est terminé`,\n//               icon: '🛡️'\n//             });\n//           }\n//         } else if (data.scan.status === 'failed') {\n//           addNotification(`Scan échoué pour ${data.scan.repository}`, 'error');\n//         }\n//       }\n//     };\n\n//     websocket.onclose = () => {\n//       console.log('WebSocket déconnecté');\n//       setWs(null);\n//       // Reconnexion automatique après 3 secondes\n//       if (!wsReconnecting) {\n//         setWsReconnecting(true);\n//         setTimeout(() => {\n//           connectWebSocket();\n//         }, 3000);\n//       }\n//     };\n\n//     websocket.onerror = (error) => {\n//       console.error('Erreur WebSocket:', error);\n//     };\n\n//     return websocket;\n//   }, [wsReconnecting]);\n\n//   useEffect(() => {\n//     const websocket = connectWebSocket();\n\n//     // Demander permission pour les notifications\n//     if ('Notification' in window && Notification.permission === 'default') {\n//       Notification.requestPermission();\n//     }\n\n//     return () => {\n//       if (websocket && websocket.readyState === WebSocket.OPEN) {\n//         websocket.close();\n//       }\n//     };\n//   }, [connectWebSocket]);\n\n//   // Système de notifications\n//   const addNotification = (message, type = 'info') => {\n//     const id = Date.now();\n//     const notification = { id, message, type, timestamp: new Date() };\n//     setNotifications(prev => [notification, ...prev.slice(0, 4)]);\n\n//     // Auto-suppression après 5 secondes\n//     setTimeout(() => {\n//       setNotifications(prev => prev.filter(n => n.id !== id));\n//     }, 5000);\n//   };\n\n//   // Récupérer l'historique des scans avec retry\n//   const fetchScans = async (retries = 3) => {\n//     try {\n//       const response = await fetch('http://localhost:3001/api/scans');\n//       if (!response.ok) throw new Error('Erreur réseau');\n//       const data = await response.json();\n//       setScans(data);\n//     } catch (err) {\n//       console.error('Erreur lors de la récupération des scans:', err);\n//       if (retries > 0) {\n//         setTimeout(() => fetchScans(retries - 1), 2000);\n//       } else {\n//         addNotification('Impossible de charger l\\'historique', 'error');\n//       }\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchScans();\n//   }, []);\n\n//   // Validation URL GitHub améliorée\n//   const isValidGitHubUrl = (url) => {\n//     const githubRegex = /^https:\\/\\/github\\.com\\/[a-zA-Z0-9_.-]+\\/[a-zA-Z0-9_.-]+\\/?$/;\n//     return githubRegex.test(url);\n//   };\n\n//   // Déclencher un nouveau scan avec gestion d'erreurs améliorée\n//   const handleScan = async (e) => {\n//     e.preventDefault();\n\n//     if (!isValidGitHubUrl(githubUrl)) {\n//       setError('Veuillez entrer une URL GitHub valide (ex: https://github.com/user/repo)');\n//       return;\n//     }\n\n//     setLoading(true);\n//     setError(null);\n\n//     try {\n//       const response = await fetch('http://localhost:3001/api/scan/trigger', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ githubUrl }),\n//       });\n\n//       if (!response.ok) {\n//         const errorData = await response.json().catch(() => ({}));\n//         throw new Error(errorData.message || 'Erreur lors du déclenchement du scan');\n//       }\n\n//       const result = await response.json();\n//       setCurrentScan(result.scan);\n//       setGithubUrl('');\n//       addNotification(`Scan démarré pour ${result.scan.repository}`, 'info');\n//     } catch (err) {\n//       setError(err.message);\n//       addNotification(err.message, 'error');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Supprimer un scan\n//   const deleteScan = async (scanId) => {\n//     setDeletingScans(prev => new Set([...prev, scanId]));\n\n//     try {\n//       const response = await fetch(`http://localhost:3001/api/scans/${scanId}`, {\n//         method: 'DELETE',\n//       });\n\n//       if (!response.ok) {\n//         const errorData = await response.json().catch(() => ({}));\n//         throw new Error(errorData.message || 'Erreur lors de la suppression');\n//       }\n\n//       // Mise à jour locale\n//       setScans(prev => prev.filter(scan => scan.id !== scanId));\n//       setSelectedScansForDeletion(prev => {\n//         const newSet = new Set(prev);\n//         newSet.delete(scanId);\n//         return newSet;\n//       });\n\n//       if (selectedScan && selectedScan.id === scanId) {\n//         setSelectedScan(null);\n//       }\n\n//       addNotification('Scan supprimé avec succès', 'success');\n//     } catch (err) {\n//       console.error('Erreur lors de la suppression:', err);\n//       addNotification(err.message || 'Erreur lors de la suppression', 'error');\n//     } finally {\n//       setDeletingScans(prev => {\n//         const newSet = new Set(prev);\n//         newSet.delete(scanId);\n//         return newSet;\n//       });\n//       setShowDeleteConfirm(null);\n//     }\n//   };\n\n//   // Supprimer plusieurs scans\n//   const deleteSelectedScans = async () => {\n//     const scanIds = Array.from(selectedScansForDeletion);\n//     if (scanIds.length === 0) return;\n\n//     setDeletingScans(prev => new Set([...prev, ...scanIds]));\n\n//     try {\n//       const promises = scanIds.map(scanId => \n//         fetch(`http://localhost:3001/api/scans/${scanId}`, { method: 'DELETE' })\n//       );\n\n//       const responses = await Promise.all(promises);\n//       const failedDeletes = responses.filter(response => !response.ok);\n\n//       if (failedDeletes.length > 0) {\n//         throw new Error(`${failedDeletes.length} suppressions ont échoué`);\n//       }\n\n//       // Mise à jour locale\n//       setScans(prev => prev.filter(scan => !scanIds.includes(scan.id)));\n//       setSelectedScansForDeletion(new Set());\n\n//       addNotification(`${scanIds.length} scan(s) supprimé(s) avec succès`, 'success');\n//     } catch (err) {\n//       console.error('Erreur lors de la suppression multiple:', err);\n//       addNotification(err.message || 'Erreur lors de la suppression', 'error');\n//     } finally {\n//       scanIds.forEach(scanId => {\n//         setDeletingScans(prev => {\n//           const newSet = new Set(prev);\n//           newSet.delete(scanId);\n//           return newSet;\n//         });\n//       });\n//       setShowDeleteConfirm(null);\n//     }\n//   };\n\n//   // Gestion de la sélection multiple\n//   const toggleScanSelection = (scanId) => {\n//     setSelectedScansForDeletion(prev => {\n//       const newSet = new Set(prev);\n//       if (newSet.has(scanId)) {\n//         newSet.delete(scanId);\n//       } else {\n//         newSet.add(scanId);\n//       }\n//       return newSet;\n//     });\n//   };\n\n//   const selectAllScans = () => {\n//     const allScanIds = filteredScans.map(scan => scan.id);\n//     setSelectedScansForDeletion(new Set(allScanIds));\n//   };\n\n//   const deselectAllScans = () => {\n//     setSelectedScansForDeletion(new Set());\n//   };\n\n//   // Filtrage des scans\n//   const filteredScans = useMemo(() => {\n//     return scans.filter(scan => {\n//       const matchesSearch = scan.repository?.toLowerCase().includes(searchTerm.toLowerCase());\n//       const matchesFilter = filterStatus === 'all' || scan.status === filterStatus;\n//       return matchesSearch && matchesFilter;\n//     });\n//   }, [scans, searchTerm, filterStatus]);\n\n//   // Relancer un scan\n//   const rerunScan = async (scanId) => {\n//     const scan = scans.find(s => s.id === scanId);\n//     if (scan) {\n//       setGithubUrl(scan.githubUrl || `https://github.com/${scan.repository}`);\n//     }\n//   };\n\n//   // Export des données\n//   const exportScans = () => {\n//     const dataStr = JSON.stringify(filteredScans, null, 2);\n//     const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\n\n//     const exportFileDefaultName = `security-scans-${new Date().toISOString().split('T')[0]}.json`;\n\n//     const linkElement = document.createElement('a');\n//     linkElement.setAttribute('href', dataUri);\n//     linkElement.setAttribute('download', exportFileDefaultName);\n//     linkElement.click();\n//   };\n\n//   // Composant de confirmation de suppression\n//   const DeleteConfirmModal = ({ scanId, scanIds, onConfirm, onCancel }) => {\n//     const isMultiple = Array.isArray(scanIds) && scanIds.length > 1;\n//     const scanName = isMultiple ? \n//       `${scanIds.length} scans` : \n//       scans.find(s => s.id === scanId)?.repository || 'ce scan';\n\n//     return (\n//       <div style={{\n//         position: 'fixed',\n//         top: 0,\n//         left: 0,\n//         right: 0,\n//         bottom: 0,\n//         backgroundColor: 'rgba(0, 0, 0, 0.5)',\n//         display: 'flex',\n//         alignItems: 'center',\n//         justifyContent: 'center',\n//         zIndex: 1001\n//       }}>\n//         <div style={{\n//           backgroundColor: theme.cardBg,\n//           color: theme.text,\n//           padding: '2rem',\n//           borderRadius: '0.5rem',\n//           maxWidth: '400px',\n//           width: '90%'\n//         }}>\n//           <h3 style={{ margin: '0 0 1rem 0', color: theme.text }}>\n//             Confirmer la suppression\n//           </h3>\n//           <p style={{ margin: '0 0 2rem 0', color: theme.textMuted }}>\n//             Êtes-vous sûr de vouloir supprimer {scanName} ? Cette action est irréversible.\n//           </p>\n//           <div style={{ display: 'flex', gap: '1rem', justifyContent: 'flex-end' }}>\n//             <button\n//               onClick={onCancel}\n//               style={{\n//                 padding: '0.5rem 1rem',\n//                 backgroundColor: 'transparent',\n//                 border: `1px solid ${theme.border}`,\n//                 color: theme.text,\n//                 borderRadius: '0.25rem',\n//                 cursor: 'pointer'\n//               }}\n//             >\n//               Annuler\n//             </button>\n//             <button\n//               onClick={onConfirm}\n//               style={{\n//                 padding: '0.5rem 1rem',\n//                 backgroundColor: theme.danger,\n//                 color: 'white',\n//                 border: 'none',\n//                 borderRadius: '0.25rem',\n//                 cursor: 'pointer'\n//               }}\n//             >\n//               Supprimer\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   };\n\n//   // Composant Notification\n//   const NotificationPanel = () => (\n//     <div style={{\n//       position: 'fixed',\n//       top: '1rem',\n//       right: '1rem',\n//       zIndex: 1000,\n//       display: showNotifications ? 'block' : 'none'\n//     }}>\n//       {notifications.map(notification => (\n//         <div\n//           key={notification.id}\n//           style={{\n//             backgroundColor: theme.cardBg,\n//             border: `2px solid ${\n//               notification.type === 'success' ? theme.success :\n//               notification.type === 'error' ? theme.danger :\n//               theme.primary\n//             }`,\n//             color: theme.text,\n//             padding: '0.75rem',\n//             borderRadius: '0.5rem',\n//             marginBottom: '0.5rem',\n//             maxWidth: '300px',\n//             boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n//             animation: 'slideIn 0.3s ease-out'\n//           }}\n//         >\n//           <div style={{ fontSize: '0.875rem' }}>\n//             {notification.message}\n//           </div>\n//           <div style={{ fontSize: '0.75rem', color: theme.textMuted, marginTop: '0.25rem' }}>\n//             {notification.timestamp.toLocaleTimeString()}\n//           </div>\n//         </div>\n//       ))}\n//     </div>\n//   );\n\n//   // Composant pour afficher le statut du scan\n//   const ScanStatus = ({ scan }) => {\n//     const getStatusColor = (status) => {\n//       switch (status) {\n//         case 'pending': return theme.warning;\n//         case 'running': return theme.primary;\n//         case 'completed': return theme.success;\n//         case 'failed': return theme.danger;\n//         default: return theme.textMuted;\n//       }\n//     };\n\n//     const getStatusIcon = (status) => {\n//       switch (status) {\n//         case 'pending': return '⏳';\n//         case 'running': return '🔄';\n//         case 'completed': return '✅';\n//         case 'failed': return '❌';\n//         default: return '❓';\n//       }\n//     };\n\n//     const duration = scan.completedAt ? \n//       Math.round((new Date(scan.completedAt) - new Date(scan.startTime)) / 1000) : \n//       Math.round((Date.now() - new Date(scan.startTime)) / 1000);\n\n//     return (\n//       <div style={{\n//         backgroundColor: theme.cardBg,\n//         color: theme.text,\n//         padding: '1.5rem',\n//         borderRadius: '0.5rem',\n//         boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n//         marginBottom: '2rem',\n//         border: `1px solid ${theme.border}`\n//       }}>\n//         <div style={{\n//           display: 'flex',\n//           alignItems: 'center',\n//           gap: '1rem',\n//           marginBottom: '1rem'\n//         }}>\n//           <span style={{ fontSize: '1.5rem' }}>\n//             {getStatusIcon(scan.status)}\n//           </span>\n//           <div>\n//             <h3 style={{ margin: 0, color: theme.text }}>\n//               Scan en cours\n//             </h3>\n//             <p style={{ margin: '0.25rem 0 0 0', color: theme.textMuted, fontSize: '0.875rem' }}>\n//               {scan.repository}\n//             </p>\n//           </div>\n//         </div>\n\n//         <div style={{\n//           display: 'flex',\n//           alignItems: 'center',\n//           gap: '0.5rem',\n//           flexWrap: 'wrap'\n//         }}>\n//           <span style={{\n//             padding: '0.25rem 0.75rem',\n//             backgroundColor: getStatusColor(scan.status),\n//             color: 'white',\n//             borderRadius: '1rem',\n//             fontSize: '0.75rem',\n//             textTransform: 'uppercase',\n//             fontWeight: 'bold'\n//           }}>\n//             {scan.status}\n//           </span>\n//           <span style={{ color: theme.textMuted, fontSize: '0.875rem' }}>\n//             Démarré: {new Date(scan.startTime).toLocaleString('fr-FR')}\n//           </span>\n//           <span style={{ color: theme.textMuted, fontSize: '0.875rem' }}>\n//             Durée: {duration}s\n//           </span>\n//         </div>\n\n//         {scan.status === 'running' && (\n//           <div style={{\n//             marginTop: '1rem',\n//             backgroundColor: darkMode ? '#404040' : '#f8f9fa',\n//             height: '0.5rem',\n//             borderRadius: '0.25rem',\n//             overflow: 'hidden'\n//           }}>\n//             <div style={{\n//               height: '100%',\n//               backgroundColor: theme.primary,\n//               width: '60%',\n//               borderRadius: '0.25rem',\n//               animation: 'pulse 2s infinite'\n//             }} />\n//           </div>\n//         )}\n//       </div>\n//     );\n//   };\n\n//   // Composant pour afficher les résultats détaillés\n//   const ScanResults = ({ scan }) => {\n//     if (!scan.results) return null;\n\n//     const totalVulns = (scan.results.critical || 0) + \n//                       (scan.results.high || 0) + \n//                       (scan.results.medium || 0) +\n//                       (scan.results.low || 0);\n\n//     const vulnData = [\n//       { key: 'critical', label: 'Critiques', color: theme.danger, count: scan.results.critical || 0 },\n//       { key: 'high', label: 'Élevées', color: theme.warning, count: scan.results.high || 0 },\n//       { key: 'medium', label: 'Moyennes', color: '#f1c40f', count: scan.results.medium || 0 },\n//       { key: 'low', label: 'Faibles', color: '#95a5a6', count: scan.results.low || 0 }\n//     ];\n\n//     return (\n//       <div style={{\n//         backgroundColor: theme.cardBg,\n//         color: theme.text,\n//         padding: '1.5rem',\n//         borderRadius: '0.5rem',\n//         boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n//         border: `2px solid ${totalVulns > 0 ? theme.danger : theme.success}`\n//       }}>\n//         <div style={{\n//           display: 'flex',\n//           justifyContent: 'space-between',\n//           alignItems: 'center',\n//           marginBottom: '1rem'\n//         }}>\n//           <h3 style={{ margin: 0, color: theme.text }}>\n//             📊 Résultats du scan\n//           </h3>\n//           <div style={{ display: 'flex', gap: '1rem', alignItems: 'center' }}>\n//             <span style={{\n//               fontSize: '1.25rem',\n//               fontWeight: 'bold',\n//               color: totalVulns > 0 ? theme.danger : theme.success\n//             }}>\n//               {totalVulns} vuln{totalVulns !== 1 ? 's' : ''}\n//             </span>\n//             <button\n//               onClick={() => setSelectedScan(scan)}\n//               style={{\n//                 padding: '0.5rem 1rem',\n//                 backgroundColor: 'transparent',\n//                 border: `1px solid ${theme.primary}`,\n//                 color: theme.primary,\n//                 borderRadius: '0.25rem',\n//                 cursor: 'pointer',\n//                 fontSize: '0.875rem'\n//               }}\n//             >\n//               Voir détails\n//             </button>\n//           </div>\n//         </div>\n\n//         <div style={{\n//           display: 'grid',\n//           gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))',\n//           gap: '1rem'\n//         }}>\n//           {vulnData.map(({ key, label, color, count }) => (\n//             <div \n//               key={key}\n//               style={{\n//                 backgroundColor: count > 0 ? `${color}20` : (darkMode ? '#404040' : '#f8f9fa'),\n//                 padding: '1rem',\n//                 borderRadius: '0.375rem',\n//                 textAlign: 'center',\n//                 border: `1px solid ${color}30`\n//               }}\n//             >\n//               <div style={{ \n//                 fontSize: '1.5rem', \n//                 fontWeight: 'bold', \n//                 color: color \n//               }}>\n//                 {count}\n//               </div>\n//               <div style={{ \n//                 fontSize: '0.75rem', \n//                 color: theme.textMuted,\n//                 textTransform: 'uppercase'\n//               }}>\n//                 {label}\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n\n//         {/* Graphique simple en barres */}\n//         <div style={{ marginTop: '1.5rem' }}>\n//           <h4 style={{ margin: '0 0 1rem 0', color: theme.text, fontSize: '1rem' }}>\n//             Répartition des vulnérabilités\n//           </h4>\n//           <div style={{ display: 'flex', gap: '0.25rem', height: '20px', backgroundColor: darkMode ? '#404040' : '#f8f9fa', borderRadius: '10px', overflow: 'hidden' }}>\n//             {vulnData.map(({ key, color, count }) => {\n//               const percentage = totalVulns > 0 ? (count / totalVulns) * 100 : 0;\n//               return percentage > 0 ? (\n//                 <div\n//                   key={key}\n//                   style={{\n//                     backgroundColor: color,\n//                     width: `${percentage}%`,\n//                     height: '100%',\n//                     transition: 'all 0.3s ease'\n//                   }}\n//                   title={`${key}: ${count} (${percentage.toFixed(1)}%)`}\n//                 />\n//               ) : null;\n//             })}\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   };\n\n//   // Modal de détails\n//   const ScanDetailsModal = ({ scan, onClose }) => {\n//     if (!scan) return null;\n\n//     return (\n//       <div style={{\n//         position: 'fixed',\n//         top: 0,\n//         left: 0,\n//         right: 0,\n//         bottom: 0,\n//         backgroundColor: 'rgba(0, 0, 0, 0.5)',\n//         display: 'flex',\n//         alignItems: 'center',\n//         justifyContent: 'center',\n//         zIndex: 1000,\n//         padding: '2rem'\n//       }}>\n//         <div style={{\n//           backgroundColor: theme.cardBg,\n//           color: theme.text,\n//           borderRadius: '0.5rem',\n//           maxWidth: '800px',\n//           width: '100%',\n//           maxHeight: '90vh',\n//           overflow: 'auto',\n//           padding: '2rem'\n//         }}>\n//           <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '2rem' }}>\n//             <h2 style={{ margin: 0 }}>Détails du scan - {scan.repository}</h2>\n//             <button\n//               onClick={onClose}\n//               style={{\n//                 backgroundColor: 'transparent',\n//                 border: 'none',\n//                 fontSize: '1.5rem',\n//                 cursor: 'pointer',\n//                 color: theme.text\n//               }}\n//             >\n//               ✕\n//             </button>\n//           </div>\n\n//           <div style={{ display: 'grid', gap: '1rem', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))' }}>\n//             <div>\n//               <strong>Repository:</strong><br />\n//               {scan.repository}\n//             </div>\n//             <div>\n//               <strong>Status:</strong><br />\n//               {scan.status}\n//             </div>\n//             <div>\n//               <strong>Démarré:</strong><br />\n//               {new Date(scan.startTime).toLocaleString()}\n//             </div>\n//             {scan.completedAt && (\n//               <div>\n//                 <strong>Terminé:</strong><br />\n//                 {new Date(scan.completedAt).toLocaleString()}\n//               </div>\n//             )}\n//           </div>\n\n//           {scan.results && (\n//             <div style={{ marginTop: '2rem' }}>\n//               <h3>Résultats détaillés</h3>\n//               <pre style={{\n//                 backgroundColor: darkMode ? '#404040' : '#f8f9fa',\n//                 padding: '1rem',\n//                 borderRadius: '0.25rem',\n//                 overflow: 'auto',\n//                 fontSize: '0.875rem'\n//               }}>\n//                 {JSON.stringify(scan.results, null, 2)}\n//               </pre>\n//             </div>\n//           )}\n\n//           <div style={{ marginTop: '2rem', display: 'flex', gap: '1rem', justifyContent: 'flex-end' }}>\n//             <button\n//               onClick={() => setShowDeleteConfirm(scan.id)}\n//               style={{\n//                 padding: '0.5rem 1rem',\n//                 backgroundColor: theme.danger,\n//                 color: 'white',\n//                 border: 'none',\n//                 borderRadius: '0.25rem',\n//                 cursor: 'pointer'\n//               }}\n//             >\n//               🗑️ Supprimer\n//             </button>\n//             <button\n//               onClick={() => rerunScan(scan.id)}\n//               style={{\n//                 padding: '0.5rem 1rem',\n//                 backgroundColor: theme.primary,\n//                 color: 'white',\n//                 border: 'none',\n//                 borderRadius: '0.25rem',\n//                 cursor: 'pointer'\n//               }}\n//             >\n//               ↻ Relancer le scan\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   };\n\n//   return (\n//     <div style={{\n//       padding: '2rem',\n//       fontFamily: 'sans-serif',\n//       backgroundColor: theme.bg,\n//       color: theme.text,\n//       minHeight: '100vh',\n//       transition: 'all 0.3s ease'\n//     }}>\n//       <NotificationPanel />\n\n//       <div style={{ maxWidth: '1200px', margin: '0 auto' }}>\n//         {/* Header avec contrôles */}\n//         <header style={{ \n//           display: 'flex', \n//           justifyContent: 'space-between', \n//           alignItems: 'center', \n//           marginBottom: '3rem',\n//           flexWrap: 'wrap',\n//           gap: '1rem'\n//         }}>\n//           <div>\n//             <h1 style={{\n//               color: theme.text,\n//               fontSize: '2.5rem',\n//               margin: '0 0 0.5rem 0'\n//             }}>\n//               🛡️ Security Scanner Platform\n//             </h1>\n//             <p style={{\n//               color: theme.textMuted,\n//               fontSize: '1.1rem',\n//               margin: 0\n//             }}>\n//               Analysez la sécurité de n'importe quel repository GitHub\n//             </p>\n//           </div>\n\n//           <div style={{ display: 'flex', gap: '1rem', alignItems: 'center' }}>\n//             <button\n//               onClick={() => setShowNotifications(!showNotifications)}\n//               style={{\n//                 padding: '0.5rem 1rem',\n//                 backgroundColor: 'transparent',\n//                 border: `1px solid ${theme.border}`,\n//                 color: theme.text,\n//                 borderRadius: '0.25rem',\n//                 cursor: 'pointer',\n//                 position: 'relative'\n//               }}\n//             >\n//               🔔 {notifications.length > 0 && (\n//                 <span style={{\n//                   position: 'absolute',\n//                   top: '-5px',\n//                   right: '-5px',\n//                   backgroundColor: theme.danger,\n//                   color: 'white',\n//                   borderRadius: '50%',\n//                   width: '20px',\n//                   height: '20px',\n//                   fontSize: '0.75rem',\n//                   display: 'flex',\n//                   alignItems: 'center',\n//                   justifyContent: 'center'\n//                 }}>\n//                   {notifications.length}\n//                 </span>\n//               )}\n//             </button>\n\n//             <button\n//               onClick={() => setDarkMode(!darkMode)}\n//               style={{\n//                 padding: '0.5rem 1rem',\n//                 backgroundColor: 'transparent',\n//                 border: `1px solid ${theme.border}`,\n//                 color: theme.text,\n//                 borderRadius: '0.25rem',\n//                 cursor: 'pointer'\n//               }}\n//             >\n//               {darkMode ? '☀️' : '🌙'}\n//             </button>\n//           </div>\n//         </header>\n\n//         {/* Status de connexion */}\n//         {wsReconnecting && (\n//           <div style={{\n//             backgroundColor: theme.warning + '20',\n//             border: `1px solid ${theme.warning}`,\n//             color: theme.warning,\n//             padding: '0.75rem',\n//             borderRadius: '0.375rem',\n//             marginBottom: '2rem',\n//             textAlign: 'center'\n//           }}>\n//             🔄 Reconnexion en cours...\n//           </div>\n//         )}\n\n//         {/* Formulaire de scan */}\n//         <div style={{\n//           backgroundColor: theme.cardBg,\n//           padding: '2rem',\n//           borderRadius: '0.5rem',\n//           boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n//           marginBottom: '2rem',\n//           border: `1px solid ${theme.border}`\n//         }}>\n//           <div>\n//             <div style={{ marginBottom: '1rem' }}>\n//               <label style={{\n//                 display: 'block',\n//                 marginBottom: '0.5rem',\n//                 fontWeight: 'bold',\n//                 color: theme.text\n//               }}>\n//                 URL du repository GitHub\n//               </label>\n//               <input\n//                 type=\"url\"\n//                 value={githubUrl}\n//                 onChange={(e) => setGithubUrl(e.target.value)}\n//                 placeholder=\"https://github.com/username/repository\"\n//                 style={{\n//                   width: '100%',\n//                   padding: '0.75rem',\n//                   border: `2px solid ${theme.border}`,\n//                   borderRadius: '0.375rem',\n//                   fontSize: '1rem',\n//                   outline: 'none',\n//                   transition: 'border-color 0.2s',\n//                   backgroundColor: theme.cardBg,\n//                   color: theme.text\n//                 }}\n//                 onFocus={(e) => e.target.style.borderColor = theme.primary}\n//                 onBlur={(e) => e.target.style.borderColor = theme.border}\n//                 disabled={loading}\n//               />\n//             </div>\n\n//             {error && (\n//               <div style={{\n//                 backgroundColor: theme.danger + '20',\n//                 color: theme.danger,\n//                 padding: '0.75rem',\n//                 borderRadius: '0.375rem',\n//                 marginBottom: '1rem',\n//                 fontSize: '0.875rem',\n//                 border: `1px solid ${theme.danger}`\n//               }}>\n//                 {error}\n//               </div>\n//             )}\n\n//             <button\n//               onClick={handleScan}\n//               disabled={loading || !githubUrl.trim()}\n//               style={{\n//                 backgroundColor: loading ? theme.textMuted : theme.primary,\n//                 color: 'white',\n//                 padding: '0.75rem 1.5rem',\n//                 border: 'none',\n//                 borderRadius: '0.375rem',\n//                 fontSize: '1rem',\n//                 fontWeight: 'bold',\n//                 cursor: loading ? 'not-allowed' : 'pointer',\n//                 transition: 'all 0.2s',\n//                 display: 'flex',\n//                 alignItems: 'center',\n//                 gap: '0.5rem'\n//               }}\n//             >\n//               {loading ? (\n//                 <>\n//                   <span>🔄</span>\n//                   Démarrage du scan...\n//                 </>\n//               ) : (\n//                 <>\n//                   <span>🚀</span>\n//                   Lancer le scan\n//                 </>\n//               )}\n//             </button>\n//           </div>\n//         </div>\n\n//         {/* Scan en cours */}\n//         {currentScan && (\n//           <>\n//             <ScanStatus scan={currentScan} />\n//             {currentScan.status === 'completed' && currentScan.results && (\n//               <ScanResults scan={currentScan} />\n//             )}\n//           </>\n//         )}\n\n//         {/* Contrôles de l'historique */}\n//         {scans.length > 0 && (\n//           <>\n//             <div style={{\n//               display: 'flex',\n//               justifyContent: 'space-between',\n//               alignItems: 'center',\n//               marginBottom: '1rem',\n//               flexWrap: 'wrap',\n//               gap: '1rem'\n//             }}>\n//               <h2 style={{ color: theme.text, margin: 0 }}>\n//                 📋 Historique des scans ({filteredScans.length})\n//               </h2>\n\n//               <div style={{ display: 'flex', gap: '1rem', alignItems: 'center', flexWrap: 'wrap' }}>\n//                 <input\n//                   type=\"text\"\n//                   placeholder=\"Rechercher...\"\n//                   value={searchTerm}\n//                   onChange={(e) => setSearchTerm(e.target.value)}\n//                   style={{\n//                     padding: '0.5rem',\n//                     border: `1px solid ${theme.border}`,\n//                     borderRadius: '0.25rem',\n//                     backgroundColor: theme.cardBg,\n//                     color: theme.text,\n//                     width: '200px'\n//                   }}\n//                 />\n\n//                 <select\n//                   value={filterStatus}\n//                   onChange={(e) => setFilterStatus(e.target.value)}\n//                   style={{\n//                     padding: '0.5rem',\n//                     border: `1px solid ${theme.border}`,\n//                     borderRadius: '0.25rem',\n//                     backgroundColor: theme.cardBg,\n//                     color: theme.text\n//                   }}\n//                 >\n//                   <option value=\"all\">Tous les statuts</option>\n//                   <option value=\"completed\">Terminés</option>\n//                   <option value=\"failed\">Échoués</option>\n//                   <option value=\"running\">En cours</option>\n//                 </select>\n\n//                 <button\n//                   onClick={exportScans}\n//                   style={{\n//                     padding: '0.5rem 1rem',\n//                     backgroundColor: theme.success,\n//                     color: 'white',\n//                     border: 'none',\n//                     borderRadius: '0.25rem',\n//                     cursor: 'pointer',\n//                     fontSize: '0.875rem'\n//                   }}\n//                 >\n//                   📥 Exporter\n//                 </button>\n//               </div>\n//             </div>\n\n//             {/* Actions de sélection multiple */}\n//             {filteredScans.length > 0 && (\n//               <div style={{\n//                 backgroundColor: theme.cardBg,\n//                 padding: '1rem',\n//                 borderRadius: '0.375rem',\n//                 marginBottom: '1rem',\n//                 border: `1px solid ${theme.border}`,\n//                 display: 'flex',\n//                 justifyContent: 'space-between',\n//                 alignItems: 'center',\n//                 flexWrap: 'wrap',\n//                 gap: '1rem'\n//               }}>\n//                 <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>\n//                   <span style={{ color: theme.textMuted, fontSize: '0.875rem' }}>\n//                     {selectedScansForDeletion.size} scan(s) sélectionné(s)\n//                   </span>\n//                   <button\n//                     onClick={selectedScansForDeletion.size === filteredScans.length ? deselectAllScans : selectAllScans}\n//                     style={{\n//                       padding: '0.25rem 0.75rem',\n//                       backgroundColor: 'transparent',\n//                       border: `1px solid ${theme.primary}`,\n//                       color: theme.primary,\n//                       borderRadius: '0.25rem',\n//                       cursor: 'pointer',\n//                       fontSize: '0.75rem'\n//                     }}\n//                   >\n//                     {selectedScansForDeletion.size === filteredScans.length ? 'Désélectionner tout' : 'Sélectionner tout'}\n//                   </button>\n//                 </div>\n\n//                 {selectedScansForDeletion.size > 0 && (\n//                   <button\n//                     onClick={() => setShowDeleteConfirm('multiple')}\n//                     disabled={Array.from(selectedScansForDeletion).some(id => deletingScans.has(id))}\n//                     style={{\n//                       padding: '0.5rem 1rem',\n//                       backgroundColor: theme.danger,\n//                       color: 'white',\n//                       border: 'none',\n//                       borderRadius: '0.25rem',\n//                       cursor: selectedScansForDeletion.size === 0 ? 'not-allowed' : 'pointer',\n//                       fontSize: '0.875rem',\n//                       opacity: Array.from(selectedScansForDeletion).some(id => deletingScans.has(id)) ? 0.5 : 1\n//                     }}\n//                   >\n//                     🗑️ Supprimer la sélection ({selectedScansForDeletion.size})\n//                   </button>\n//                 )}\n//               </div>\n//             )}\n\n//             {/* Liste des scans */}\n//             <div style={{ display: 'grid', gap: '1rem' }}>\n//               {filteredScans.slice(0, 20).map((scan, index) => {\n//                 const totalVulns = scan.results ? \n//                   (scan.results.critical || 0) + (scan.results.high || 0) + (scan.results.medium || 0) + (scan.results.low || 0) : 0;\n//                 const isDeleting = deletingScans.has(scan.id);\n//                 const isSelected = selectedScansForDeletion.has(scan.id);\n\n//                 return (\n//                   <div\n//                     key={scan.id || index}\n//                     style={{\n//                       backgroundColor: theme.cardBg,\n//                       padding: '1rem',\n//                       borderRadius: '0.375rem',\n//                       boxShadow: '0 1px 3px rgba(0,0,0,0.1)',\n//                       display: 'flex',\n//                       justifyContent: 'space-between',\n//                       alignItems: 'center',\n//                       border: `2px solid ${isSelected ? theme.primary : theme.border}`,\n//                       transition: 'all 0.2s ease',\n//                       opacity: isDeleting ? 0.5 : 1,\n//                       cursor: isDeleting ? 'not-allowed' : 'pointer'\n//                     }}\n//                   >\n//                     <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', flex: 1 }}>\n//                       <input\n//                         type=\"checkbox\"\n//                         checked={isSelected}\n//                         onChange={() => !isDeleting && toggleScanSelection(scan.id)}\n//                         disabled={isDeleting}\n//                         style={{\n//                           width: '1.25rem',\n//                           height: '1.25rem',\n//                           cursor: isDeleting ? 'not-allowed' : 'pointer'\n//                         }}\n//                       />\n\n//                       <div \n//                         onClick={() => !isDeleting && setSelectedScan(scan)}\n//                         style={{ flex: 1, cursor: isDeleting ? 'not-allowed' : 'pointer' }}\n//                       >\n//                         <h4 style={{ margin: '0 0 0.25rem 0', color: theme.text }}>\n//                           {scan.repository}\n//                         </h4>\n//                         <p style={{ margin: 0, color: theme.textMuted, fontSize: '0.875rem' }}>\n//                           {new Date(scan.completedAt || scan.startTime).toLocaleString('fr-FR')}\n//                         </p>\n//                       </div>\n//                     </div>\n\n//                     <div style={{\n//                       display: 'flex',\n//                       alignItems: 'center',\n//                       gap: '1rem'\n//                     }}>\n//                       {scan.results && (\n//                         <div style={{ \n//                           fontSize: '0.875rem', \n//                           color: totalVulns > 0 ? theme.danger : theme.success,\n//                           fontWeight: 'bold'\n//                         }}>\n//                           {totalVulns} vulns\n//                         </div>\n//                       )}\n//                       <span style={{\n//                         padding: '0.25rem 0.5rem',\n//                         backgroundColor: scan.status === 'completed' ? theme.success : \n//                                        scan.status === 'failed' ? theme.danger :\n//                                        scan.status === 'running' ? theme.primary : theme.textMuted,\n//                         color: 'white',\n//                         borderRadius: '0.25rem',\n//                         fontSize: '0.75rem'\n//                       }}>\n//                         {scan.status}\n//                       </span>\n\n//                       <button\n//                         onClick={(e) => {\n//                           e.stopPropagation();\n//                           rerunScan(scan.id);\n//                         }}\n//                         disabled={isDeleting}\n//                         style={{\n//                           padding: '0.25rem 0.5rem',\n//                           backgroundColor: 'transparent',\n//                           border: `1px solid ${theme.primary}`,\n//                           color: theme.primary,\n//                           borderRadius: '0.25rem',\n//                           cursor: isDeleting ? 'not-allowed' : 'pointer',\n//                           fontSize: '0.75rem',\n//                           opacity: isDeleting ? 0.5 : 1\n//                         }}\n//                         title=\"Relancer le scan\"\n//                       >\n//                         ↻\n//                       </button>\n\n//                       <button\n//                         onClick={(e) => {\n//                           e.stopPropagation();\n//                           setShowDeleteConfirm(scan.id);\n//                         }}\n//                         disabled={isDeleting}\n//                         style={{\n//                           padding: '0.25rem 0.5rem',\n//                           backgroundColor: 'transparent',\n//                           border: `1px solid ${theme.danger}`,\n//                           color: theme.danger,\n//                           borderRadius: '0.25rem',\n//                           cursor: isDeleting ? 'not-allowed' : 'pointer',\n//                           fontSize: '0.75rem',\n//                           opacity: isDeleting ? 0.5 : 1\n//                         }}\n//                         title=\"Supprimer le scan\"\n//                       >\n//                         {isDeleting ? '⏳' : '🗑️'}\n//                       </button>\n//                     </div>\n//                   </div>\n//                 );\n//               })}\n//             </div>\n//           </>\n//         )}\n//       </div>\n\n//       {/* Modal de détails */}\n//       {selectedScan && (\n//         <ScanDetailsModal \n//           scan={selectedScan} \n//           onClose={() => setSelectedScan(null)} \n//         />\n//       )}\n\n//       {/* Modal de confirmation de suppression */}\n//       {showDeleteConfirm && (\n//         <DeleteConfirmModal\n//           scanId={showDeleteConfirm === 'multiple' ? null : showDeleteConfirm}\n//           scanIds={showDeleteConfirm === 'multiple' ? Array.from(selectedScansForDeletion) : null}\n//           onConfirm={showDeleteConfirm === 'multiple' ? deleteSelectedScans : () => deleteScan(showDeleteConfirm)}\n//           onCancel={() => setShowDeleteConfirm(null)}\n//         />\n//       )}\n\n//       <style>\n//         {`\n//           @keyframes pulse {\n//             0%, 100% { opacity: 1; }\n//             50% { opacity: 0.5; }\n//           }\n\n//           @keyframes slideIn {\n//             from {\n//               transform: translateX(100%);\n//               opacity: 0;\n//             }\n//             to {\n//               transform: translateX(0);\n//               opacity: 1;\n//             }\n//           }\n//         `}\n//       </style>\n//     </div>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["C:/Users/hp/Desktop/DevSecOps/projet-devsecops/dashboard/src/App.js"],"sourcesContent":["// import React, { useState, useEffect, useCallback, useMemo } from 'react';\r\n\r\n// function App() {\r\n//   const [githubUrl, setGithubUrl] = useState('');\r\n//   const [scans, setScans] = useState([]);\r\n//   const [currentScan, setCurrentScan] = useState(null);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [ws, setWs] = useState(null);\r\n//   const [darkMode, setDarkMode] = useState(false);\r\n//   const [selectedScan, setSelectedScan] = useState(null);\r\n//   const [searchTerm, setSearchTerm] = useState('');\r\n//   const [filterStatus, setFilterStatus] = useState('all');\r\n//   const [wsReconnecting, setWsReconnecting] = useState(false);\r\n//   const [notifications, setNotifications] = useState([]);\r\n//   const [showNotifications, setShowNotifications] = useState(false);\r\n//   const [deletingScans, setDeletingScans] = useState(new Set());\r\n//   const [selectedScansForDeletion, setSelectedScansForDeletion] = useState(new Set());\r\n//   const [showDeleteConfirm, setShowDeleteConfirm] = useState(null);\r\n\r\n//   // Thème\r\n//   const theme = useMemo(() => ({\r\n//     bg: darkMode ? '#1a1a1a' : '#f8f9fa',\r\n//     cardBg: darkMode ? '#2d2d2d' : 'white',\r\n//     text: darkMode ? '#ffffff' : '#2c3e50',\r\n//     textMuted: darkMode ? '#a0a0a0' : '#6c757d',\r\n//     border: darkMode ? '#404040' : '#e1e8ed',\r\n//     primary: '#3498db',\r\n//     success: '#27ae60',\r\n//     warning: '#f39c12',\r\n//     danger: '#e74c3c'\r\n//   }), [darkMode]);\r\n\r\n//   // Connexion WebSocket avec reconnexion automatique\r\n//   const connectWebSocket = useCallback(() => {\r\n//     const websocket = new WebSocket('ws://localhost:3001');\r\n    \r\n//     websocket.onopen = () => {\r\n//       console.log('WebSocket connecté');\r\n//       setWs(websocket);\r\n//       setWsReconnecting(false);\r\n//       addNotification('Connexion temps réel établie', 'success');\r\n//     };\r\n\r\n//     websocket.onmessage = (event) => {\r\n//       const data = JSON.parse(event.data);\r\n//       if (data.type === 'scan_update') {\r\n//         setCurrentScan(data.scan);\r\n//         if (data.scan.status === 'completed') {\r\n//           addNotification(`Scan terminé pour ${data.scan.repository}`, 'success');\r\n//           fetchScans();\r\n//           // Notification navigateur\r\n//           if ('Notification' in window && Notification.permission === 'granted') {\r\n//             new Notification('Scan terminé', {\r\n//               body: `Le scan de ${data.scan.repository} est terminé`,\r\n//               icon: '🛡️'\r\n//             });\r\n//           }\r\n//         } else if (data.scan.status === 'failed') {\r\n//           addNotification(`Scan échoué pour ${data.scan.repository}`, 'error');\r\n//         }\r\n//       }\r\n//     };\r\n\r\n//     websocket.onclose = () => {\r\n//       console.log('WebSocket déconnecté');\r\n//       setWs(null);\r\n//       // Reconnexion automatique après 3 secondes\r\n//       if (!wsReconnecting) {\r\n//         setWsReconnecting(true);\r\n//         setTimeout(() => {\r\n//           connectWebSocket();\r\n//         }, 3000);\r\n//       }\r\n//     };\r\n\r\n//     websocket.onerror = (error) => {\r\n//       console.error('Erreur WebSocket:', error);\r\n//     };\r\n\r\n//     return websocket;\r\n//   }, [wsReconnecting]);\r\n\r\n//   useEffect(() => {\r\n//     const websocket = connectWebSocket();\r\n    \r\n//     // Demander permission pour les notifications\r\n//     if ('Notification' in window && Notification.permission === 'default') {\r\n//       Notification.requestPermission();\r\n//     }\r\n\r\n//     return () => {\r\n//       if (websocket && websocket.readyState === WebSocket.OPEN) {\r\n//         websocket.close();\r\n//       }\r\n//     };\r\n//   }, [connectWebSocket]);\r\n\r\n//   // Système de notifications\r\n//   const addNotification = (message, type = 'info') => {\r\n//     const id = Date.now();\r\n//     const notification = { id, message, type, timestamp: new Date() };\r\n//     setNotifications(prev => [notification, ...prev.slice(0, 4)]);\r\n    \r\n//     // Auto-suppression après 5 secondes\r\n//     setTimeout(() => {\r\n//       setNotifications(prev => prev.filter(n => n.id !== id));\r\n//     }, 5000);\r\n//   };\r\n\r\n//   // Récupérer l'historique des scans avec retry\r\n//   const fetchScans = async (retries = 3) => {\r\n//     try {\r\n//       const response = await fetch('http://localhost:3001/api/scans');\r\n//       if (!response.ok) throw new Error('Erreur réseau');\r\n//       const data = await response.json();\r\n//       setScans(data);\r\n//     } catch (err) {\r\n//       console.error('Erreur lors de la récupération des scans:', err);\r\n//       if (retries > 0) {\r\n//         setTimeout(() => fetchScans(retries - 1), 2000);\r\n//       } else {\r\n//         addNotification('Impossible de charger l\\'historique', 'error');\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchScans();\r\n//   }, []);\r\n\r\n//   // Validation URL GitHub améliorée\r\n//   const isValidGitHubUrl = (url) => {\r\n//     const githubRegex = /^https:\\/\\/github\\.com\\/[a-zA-Z0-9_.-]+\\/[a-zA-Z0-9_.-]+\\/?$/;\r\n//     return githubRegex.test(url);\r\n//   };\r\n\r\n//   // Déclencher un nouveau scan avec gestion d'erreurs améliorée\r\n//   const handleScan = async (e) => {\r\n//     e.preventDefault();\r\n    \r\n//     if (!isValidGitHubUrl(githubUrl)) {\r\n//       setError('Veuillez entrer une URL GitHub valide (ex: https://github.com/user/repo)');\r\n//       return;\r\n//     }\r\n\r\n//     setLoading(true);\r\n//     setError(null);\r\n    \r\n//     try {\r\n//       const response = await fetch('http://localhost:3001/api/scan/trigger', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify({ githubUrl }),\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         const errorData = await response.json().catch(() => ({}));\r\n//         throw new Error(errorData.message || 'Erreur lors du déclenchement du scan');\r\n//       }\r\n\r\n//       const result = await response.json();\r\n//       setCurrentScan(result.scan);\r\n//       setGithubUrl('');\r\n//       addNotification(`Scan démarré pour ${result.scan.repository}`, 'info');\r\n//     } catch (err) {\r\n//       setError(err.message);\r\n//       addNotification(err.message, 'error');\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   // Supprimer un scan\r\n//   const deleteScan = async (scanId) => {\r\n//     setDeletingScans(prev => new Set([...prev, scanId]));\r\n    \r\n//     try {\r\n//       const response = await fetch(`http://localhost:3001/api/scans/${scanId}`, {\r\n//         method: 'DELETE',\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         const errorData = await response.json().catch(() => ({}));\r\n//         throw new Error(errorData.message || 'Erreur lors de la suppression');\r\n//       }\r\n\r\n//       // Mise à jour locale\r\n//       setScans(prev => prev.filter(scan => scan.id !== scanId));\r\n//       setSelectedScansForDeletion(prev => {\r\n//         const newSet = new Set(prev);\r\n//         newSet.delete(scanId);\r\n//         return newSet;\r\n//       });\r\n      \r\n//       if (selectedScan && selectedScan.id === scanId) {\r\n//         setSelectedScan(null);\r\n//       }\r\n\r\n//       addNotification('Scan supprimé avec succès', 'success');\r\n//     } catch (err) {\r\n//       console.error('Erreur lors de la suppression:', err);\r\n//       addNotification(err.message || 'Erreur lors de la suppression', 'error');\r\n//     } finally {\r\n//       setDeletingScans(prev => {\r\n//         const newSet = new Set(prev);\r\n//         newSet.delete(scanId);\r\n//         return newSet;\r\n//       });\r\n//       setShowDeleteConfirm(null);\r\n//     }\r\n//   };\r\n\r\n//   // Supprimer plusieurs scans\r\n//   const deleteSelectedScans = async () => {\r\n//     const scanIds = Array.from(selectedScansForDeletion);\r\n//     if (scanIds.length === 0) return;\r\n\r\n//     setDeletingScans(prev => new Set([...prev, ...scanIds]));\r\n\r\n//     try {\r\n//       const promises = scanIds.map(scanId => \r\n//         fetch(`http://localhost:3001/api/scans/${scanId}`, { method: 'DELETE' })\r\n//       );\r\n\r\n//       const responses = await Promise.all(promises);\r\n//       const failedDeletes = responses.filter(response => !response.ok);\r\n\r\n//       if (failedDeletes.length > 0) {\r\n//         throw new Error(`${failedDeletes.length} suppressions ont échoué`);\r\n//       }\r\n\r\n//       // Mise à jour locale\r\n//       setScans(prev => prev.filter(scan => !scanIds.includes(scan.id)));\r\n//       setSelectedScansForDeletion(new Set());\r\n      \r\n//       addNotification(`${scanIds.length} scan(s) supprimé(s) avec succès`, 'success');\r\n//     } catch (err) {\r\n//       console.error('Erreur lors de la suppression multiple:', err);\r\n//       addNotification(err.message || 'Erreur lors de la suppression', 'error');\r\n//     } finally {\r\n//       scanIds.forEach(scanId => {\r\n//         setDeletingScans(prev => {\r\n//           const newSet = new Set(prev);\r\n//           newSet.delete(scanId);\r\n//           return newSet;\r\n//         });\r\n//       });\r\n//       setShowDeleteConfirm(null);\r\n//     }\r\n//   };\r\n\r\n//   // Gestion de la sélection multiple\r\n//   const toggleScanSelection = (scanId) => {\r\n//     setSelectedScansForDeletion(prev => {\r\n//       const newSet = new Set(prev);\r\n//       if (newSet.has(scanId)) {\r\n//         newSet.delete(scanId);\r\n//       } else {\r\n//         newSet.add(scanId);\r\n//       }\r\n//       return newSet;\r\n//     });\r\n//   };\r\n\r\n//   const selectAllScans = () => {\r\n//     const allScanIds = filteredScans.map(scan => scan.id);\r\n//     setSelectedScansForDeletion(new Set(allScanIds));\r\n//   };\r\n\r\n//   const deselectAllScans = () => {\r\n//     setSelectedScansForDeletion(new Set());\r\n//   };\r\n\r\n//   // Filtrage des scans\r\n//   const filteredScans = useMemo(() => {\r\n//     return scans.filter(scan => {\r\n//       const matchesSearch = scan.repository?.toLowerCase().includes(searchTerm.toLowerCase());\r\n//       const matchesFilter = filterStatus === 'all' || scan.status === filterStatus;\r\n//       return matchesSearch && matchesFilter;\r\n//     });\r\n//   }, [scans, searchTerm, filterStatus]);\r\n\r\n//   // Relancer un scan\r\n//   const rerunScan = async (scanId) => {\r\n//     const scan = scans.find(s => s.id === scanId);\r\n//     if (scan) {\r\n//       setGithubUrl(scan.githubUrl || `https://github.com/${scan.repository}`);\r\n//     }\r\n//   };\r\n\r\n//   // Export des données\r\n//   const exportScans = () => {\r\n//     const dataStr = JSON.stringify(filteredScans, null, 2);\r\n//     const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\r\n    \r\n//     const exportFileDefaultName = `security-scans-${new Date().toISOString().split('T')[0]}.json`;\r\n    \r\n//     const linkElement = document.createElement('a');\r\n//     linkElement.setAttribute('href', dataUri);\r\n//     linkElement.setAttribute('download', exportFileDefaultName);\r\n//     linkElement.click();\r\n//   };\r\n\r\n//   // Composant de confirmation de suppression\r\n//   const DeleteConfirmModal = ({ scanId, scanIds, onConfirm, onCancel }) => {\r\n//     const isMultiple = Array.isArray(scanIds) && scanIds.length > 1;\r\n//     const scanName = isMultiple ? \r\n//       `${scanIds.length} scans` : \r\n//       scans.find(s => s.id === scanId)?.repository || 'ce scan';\r\n\r\n//     return (\r\n//       <div style={{\r\n//         position: 'fixed',\r\n//         top: 0,\r\n//         left: 0,\r\n//         right: 0,\r\n//         bottom: 0,\r\n//         backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n//         display: 'flex',\r\n//         alignItems: 'center',\r\n//         justifyContent: 'center',\r\n//         zIndex: 1001\r\n//       }}>\r\n//         <div style={{\r\n//           backgroundColor: theme.cardBg,\r\n//           color: theme.text,\r\n//           padding: '2rem',\r\n//           borderRadius: '0.5rem',\r\n//           maxWidth: '400px',\r\n//           width: '90%'\r\n//         }}>\r\n//           <h3 style={{ margin: '0 0 1rem 0', color: theme.text }}>\r\n//             Confirmer la suppression\r\n//           </h3>\r\n//           <p style={{ margin: '0 0 2rem 0', color: theme.textMuted }}>\r\n//             Êtes-vous sûr de vouloir supprimer {scanName} ? Cette action est irréversible.\r\n//           </p>\r\n//           <div style={{ display: 'flex', gap: '1rem', justifyContent: 'flex-end' }}>\r\n//             <button\r\n//               onClick={onCancel}\r\n//               style={{\r\n//                 padding: '0.5rem 1rem',\r\n//                 backgroundColor: 'transparent',\r\n//                 border: `1px solid ${theme.border}`,\r\n//                 color: theme.text,\r\n//                 borderRadius: '0.25rem',\r\n//                 cursor: 'pointer'\r\n//               }}\r\n//             >\r\n//               Annuler\r\n//             </button>\r\n//             <button\r\n//               onClick={onConfirm}\r\n//               style={{\r\n//                 padding: '0.5rem 1rem',\r\n//                 backgroundColor: theme.danger,\r\n//                 color: 'white',\r\n//                 border: 'none',\r\n//                 borderRadius: '0.25rem',\r\n//                 cursor: 'pointer'\r\n//               }}\r\n//             >\r\n//               Supprimer\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   // Composant Notification\r\n//   const NotificationPanel = () => (\r\n//     <div style={{\r\n//       position: 'fixed',\r\n//       top: '1rem',\r\n//       right: '1rem',\r\n//       zIndex: 1000,\r\n//       display: showNotifications ? 'block' : 'none'\r\n//     }}>\r\n//       {notifications.map(notification => (\r\n//         <div\r\n//           key={notification.id}\r\n//           style={{\r\n//             backgroundColor: theme.cardBg,\r\n//             border: `2px solid ${\r\n//               notification.type === 'success' ? theme.success :\r\n//               notification.type === 'error' ? theme.danger :\r\n//               theme.primary\r\n//             }`,\r\n//             color: theme.text,\r\n//             padding: '0.75rem',\r\n//             borderRadius: '0.5rem',\r\n//             marginBottom: '0.5rem',\r\n//             maxWidth: '300px',\r\n//             boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n//             animation: 'slideIn 0.3s ease-out'\r\n//           }}\r\n//         >\r\n//           <div style={{ fontSize: '0.875rem' }}>\r\n//             {notification.message}\r\n//           </div>\r\n//           <div style={{ fontSize: '0.75rem', color: theme.textMuted, marginTop: '0.25rem' }}>\r\n//             {notification.timestamp.toLocaleTimeString()}\r\n//           </div>\r\n//         </div>\r\n//       ))}\r\n//     </div>\r\n//   );\r\n\r\n//   // Composant pour afficher le statut du scan\r\n//   const ScanStatus = ({ scan }) => {\r\n//     const getStatusColor = (status) => {\r\n//       switch (status) {\r\n//         case 'pending': return theme.warning;\r\n//         case 'running': return theme.primary;\r\n//         case 'completed': return theme.success;\r\n//         case 'failed': return theme.danger;\r\n//         default: return theme.textMuted;\r\n//       }\r\n//     };\r\n\r\n//     const getStatusIcon = (status) => {\r\n//       switch (status) {\r\n//         case 'pending': return '⏳';\r\n//         case 'running': return '🔄';\r\n//         case 'completed': return '✅';\r\n//         case 'failed': return '❌';\r\n//         default: return '❓';\r\n//       }\r\n//     };\r\n\r\n//     const duration = scan.completedAt ? \r\n//       Math.round((new Date(scan.completedAt) - new Date(scan.startTime)) / 1000) : \r\n//       Math.round((Date.now() - new Date(scan.startTime)) / 1000);\r\n\r\n//     return (\r\n//       <div style={{\r\n//         backgroundColor: theme.cardBg,\r\n//         color: theme.text,\r\n//         padding: '1.5rem',\r\n//         borderRadius: '0.5rem',\r\n//         boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\r\n//         marginBottom: '2rem',\r\n//         border: `1px solid ${theme.border}`\r\n//       }}>\r\n//         <div style={{\r\n//           display: 'flex',\r\n//           alignItems: 'center',\r\n//           gap: '1rem',\r\n//           marginBottom: '1rem'\r\n//         }}>\r\n//           <span style={{ fontSize: '1.5rem' }}>\r\n//             {getStatusIcon(scan.status)}\r\n//           </span>\r\n//           <div>\r\n//             <h3 style={{ margin: 0, color: theme.text }}>\r\n//               Scan en cours\r\n//             </h3>\r\n//             <p style={{ margin: '0.25rem 0 0 0', color: theme.textMuted, fontSize: '0.875rem' }}>\r\n//               {scan.repository}\r\n//             </p>\r\n//           </div>\r\n//         </div>\r\n        \r\n//         <div style={{\r\n//           display: 'flex',\r\n//           alignItems: 'center',\r\n//           gap: '0.5rem',\r\n//           flexWrap: 'wrap'\r\n//         }}>\r\n//           <span style={{\r\n//             padding: '0.25rem 0.75rem',\r\n//             backgroundColor: getStatusColor(scan.status),\r\n//             color: 'white',\r\n//             borderRadius: '1rem',\r\n//             fontSize: '0.75rem',\r\n//             textTransform: 'uppercase',\r\n//             fontWeight: 'bold'\r\n//           }}>\r\n//             {scan.status}\r\n//           </span>\r\n//           <span style={{ color: theme.textMuted, fontSize: '0.875rem' }}>\r\n//             Démarré: {new Date(scan.startTime).toLocaleString('fr-FR')}\r\n//           </span>\r\n//           <span style={{ color: theme.textMuted, fontSize: '0.875rem' }}>\r\n//             Durée: {duration}s\r\n//           </span>\r\n//         </div>\r\n\r\n//         {scan.status === 'running' && (\r\n//           <div style={{\r\n//             marginTop: '1rem',\r\n//             backgroundColor: darkMode ? '#404040' : '#f8f9fa',\r\n//             height: '0.5rem',\r\n//             borderRadius: '0.25rem',\r\n//             overflow: 'hidden'\r\n//           }}>\r\n//             <div style={{\r\n//               height: '100%',\r\n//               backgroundColor: theme.primary,\r\n//               width: '60%',\r\n//               borderRadius: '0.25rem',\r\n//               animation: 'pulse 2s infinite'\r\n//             }} />\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   // Composant pour afficher les résultats détaillés\r\n//   const ScanResults = ({ scan }) => {\r\n//     if (!scan.results) return null;\r\n\r\n//     const totalVulns = (scan.results.critical || 0) + \r\n//                       (scan.results.high || 0) + \r\n//                       (scan.results.medium || 0) +\r\n//                       (scan.results.low || 0);\r\n\r\n//     const vulnData = [\r\n//       { key: 'critical', label: 'Critiques', color: theme.danger, count: scan.results.critical || 0 },\r\n//       { key: 'high', label: 'Élevées', color: theme.warning, count: scan.results.high || 0 },\r\n//       { key: 'medium', label: 'Moyennes', color: '#f1c40f', count: scan.results.medium || 0 },\r\n//       { key: 'low', label: 'Faibles', color: '#95a5a6', count: scan.results.low || 0 }\r\n//     ];\r\n\r\n//     return (\r\n//       <div style={{\r\n//         backgroundColor: theme.cardBg,\r\n//         color: theme.text,\r\n//         padding: '1.5rem',\r\n//         borderRadius: '0.5rem',\r\n//         boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\r\n//         border: `2px solid ${totalVulns > 0 ? theme.danger : theme.success}`\r\n//       }}>\r\n//         <div style={{\r\n//           display: 'flex',\r\n//           justifyContent: 'space-between',\r\n//           alignItems: 'center',\r\n//           marginBottom: '1rem'\r\n//         }}>\r\n//           <h3 style={{ margin: 0, color: theme.text }}>\r\n//             📊 Résultats du scan\r\n//           </h3>\r\n//           <div style={{ display: 'flex', gap: '1rem', alignItems: 'center' }}>\r\n//             <span style={{\r\n//               fontSize: '1.25rem',\r\n//               fontWeight: 'bold',\r\n//               color: totalVulns > 0 ? theme.danger : theme.success\r\n//             }}>\r\n//               {totalVulns} vuln{totalVulns !== 1 ? 's' : ''}\r\n//             </span>\r\n//             <button\r\n//               onClick={() => setSelectedScan(scan)}\r\n//               style={{\r\n//                 padding: '0.5rem 1rem',\r\n//                 backgroundColor: 'transparent',\r\n//                 border: `1px solid ${theme.primary}`,\r\n//                 color: theme.primary,\r\n//                 borderRadius: '0.25rem',\r\n//                 cursor: 'pointer',\r\n//                 fontSize: '0.875rem'\r\n//               }}\r\n//             >\r\n//               Voir détails\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div style={{\r\n//           display: 'grid',\r\n//           gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))',\r\n//           gap: '1rem'\r\n//         }}>\r\n//           {vulnData.map(({ key, label, color, count }) => (\r\n//             <div \r\n//               key={key}\r\n//               style={{\r\n//                 backgroundColor: count > 0 ? `${color}20` : (darkMode ? '#404040' : '#f8f9fa'),\r\n//                 padding: '1rem',\r\n//                 borderRadius: '0.375rem',\r\n//                 textAlign: 'center',\r\n//                 border: `1px solid ${color}30`\r\n//               }}\r\n//             >\r\n//               <div style={{ \r\n//                 fontSize: '1.5rem', \r\n//                 fontWeight: 'bold', \r\n//                 color: color \r\n//               }}>\r\n//                 {count}\r\n//               </div>\r\n//               <div style={{ \r\n//                 fontSize: '0.75rem', \r\n//                 color: theme.textMuted,\r\n//                 textTransform: 'uppercase'\r\n//               }}>\r\n//                 {label}\r\n//               </div>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n\r\n//         {/* Graphique simple en barres */}\r\n//         <div style={{ marginTop: '1.5rem' }}>\r\n//           <h4 style={{ margin: '0 0 1rem 0', color: theme.text, fontSize: '1rem' }}>\r\n//             Répartition des vulnérabilités\r\n//           </h4>\r\n//           <div style={{ display: 'flex', gap: '0.25rem', height: '20px', backgroundColor: darkMode ? '#404040' : '#f8f9fa', borderRadius: '10px', overflow: 'hidden' }}>\r\n//             {vulnData.map(({ key, color, count }) => {\r\n//               const percentage = totalVulns > 0 ? (count / totalVulns) * 100 : 0;\r\n//               return percentage > 0 ? (\r\n//                 <div\r\n//                   key={key}\r\n//                   style={{\r\n//                     backgroundColor: color,\r\n//                     width: `${percentage}%`,\r\n//                     height: '100%',\r\n//                     transition: 'all 0.3s ease'\r\n//                   }}\r\n//                   title={`${key}: ${count} (${percentage.toFixed(1)}%)`}\r\n//                 />\r\n//               ) : null;\r\n//             })}\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   // Modal de détails\r\n//   const ScanDetailsModal = ({ scan, onClose }) => {\r\n//     if (!scan) return null;\r\n\r\n//     return (\r\n//       <div style={{\r\n//         position: 'fixed',\r\n//         top: 0,\r\n//         left: 0,\r\n//         right: 0,\r\n//         bottom: 0,\r\n//         backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n//         display: 'flex',\r\n//         alignItems: 'center',\r\n//         justifyContent: 'center',\r\n//         zIndex: 1000,\r\n//         padding: '2rem'\r\n//       }}>\r\n//         <div style={{\r\n//           backgroundColor: theme.cardBg,\r\n//           color: theme.text,\r\n//           borderRadius: '0.5rem',\r\n//           maxWidth: '800px',\r\n//           width: '100%',\r\n//           maxHeight: '90vh',\r\n//           overflow: 'auto',\r\n//           padding: '2rem'\r\n//         }}>\r\n//           <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '2rem' }}>\r\n//             <h2 style={{ margin: 0 }}>Détails du scan - {scan.repository}</h2>\r\n//             <button\r\n//               onClick={onClose}\r\n//               style={{\r\n//                 backgroundColor: 'transparent',\r\n//                 border: 'none',\r\n//                 fontSize: '1.5rem',\r\n//                 cursor: 'pointer',\r\n//                 color: theme.text\r\n//               }}\r\n//             >\r\n//               ✕\r\n//             </button>\r\n//           </div>\r\n          \r\n//           <div style={{ display: 'grid', gap: '1rem', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))' }}>\r\n//             <div>\r\n//               <strong>Repository:</strong><br />\r\n//               {scan.repository}\r\n//             </div>\r\n//             <div>\r\n//               <strong>Status:</strong><br />\r\n//               {scan.status}\r\n//             </div>\r\n//             <div>\r\n//               <strong>Démarré:</strong><br />\r\n//               {new Date(scan.startTime).toLocaleString()}\r\n//             </div>\r\n//             {scan.completedAt && (\r\n//               <div>\r\n//                 <strong>Terminé:</strong><br />\r\n//                 {new Date(scan.completedAt).toLocaleString()}\r\n//               </div>\r\n//             )}\r\n//           </div>\r\n\r\n//           {scan.results && (\r\n//             <div style={{ marginTop: '2rem' }}>\r\n//               <h3>Résultats détaillés</h3>\r\n//               <pre style={{\r\n//                 backgroundColor: darkMode ? '#404040' : '#f8f9fa',\r\n//                 padding: '1rem',\r\n//                 borderRadius: '0.25rem',\r\n//                 overflow: 'auto',\r\n//                 fontSize: '0.875rem'\r\n//               }}>\r\n//                 {JSON.stringify(scan.results, null, 2)}\r\n//               </pre>\r\n//             </div>\r\n//           )}\r\n\r\n//           <div style={{ marginTop: '2rem', display: 'flex', gap: '1rem', justifyContent: 'flex-end' }}>\r\n//             <button\r\n//               onClick={() => setShowDeleteConfirm(scan.id)}\r\n//               style={{\r\n//                 padding: '0.5rem 1rem',\r\n//                 backgroundColor: theme.danger,\r\n//                 color: 'white',\r\n//                 border: 'none',\r\n//                 borderRadius: '0.25rem',\r\n//                 cursor: 'pointer'\r\n//               }}\r\n//             >\r\n//               🗑️ Supprimer\r\n//             </button>\r\n//             <button\r\n//               onClick={() => rerunScan(scan.id)}\r\n//               style={{\r\n//                 padding: '0.5rem 1rem',\r\n//                 backgroundColor: theme.primary,\r\n//                 color: 'white',\r\n//                 border: 'none',\r\n//                 borderRadius: '0.25rem',\r\n//                 cursor: 'pointer'\r\n//               }}\r\n//             >\r\n//               ↻ Relancer le scan\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{\r\n//       padding: '2rem',\r\n//       fontFamily: 'sans-serif',\r\n//       backgroundColor: theme.bg,\r\n//       color: theme.text,\r\n//       minHeight: '100vh',\r\n//       transition: 'all 0.3s ease'\r\n//     }}>\r\n//       <NotificationPanel />\r\n      \r\n//       <div style={{ maxWidth: '1200px', margin: '0 auto' }}>\r\n//         {/* Header avec contrôles */}\r\n//         <header style={{ \r\n//           display: 'flex', \r\n//           justifyContent: 'space-between', \r\n//           alignItems: 'center', \r\n//           marginBottom: '3rem',\r\n//           flexWrap: 'wrap',\r\n//           gap: '1rem'\r\n//         }}>\r\n//           <div>\r\n//             <h1 style={{\r\n//               color: theme.text,\r\n//               fontSize: '2.5rem',\r\n//               margin: '0 0 0.5rem 0'\r\n//             }}>\r\n//               🛡️ Security Scanner Platform\r\n//             </h1>\r\n//             <p style={{\r\n//               color: theme.textMuted,\r\n//               fontSize: '1.1rem',\r\n//               margin: 0\r\n//             }}>\r\n//               Analysez la sécurité de n'importe quel repository GitHub\r\n//             </p>\r\n//           </div>\r\n          \r\n//           <div style={{ display: 'flex', gap: '1rem', alignItems: 'center' }}>\r\n//             <button\r\n//               onClick={() => setShowNotifications(!showNotifications)}\r\n//               style={{\r\n//                 padding: '0.5rem 1rem',\r\n//                 backgroundColor: 'transparent',\r\n//                 border: `1px solid ${theme.border}`,\r\n//                 color: theme.text,\r\n//                 borderRadius: '0.25rem',\r\n//                 cursor: 'pointer',\r\n//                 position: 'relative'\r\n//               }}\r\n//             >\r\n//               🔔 {notifications.length > 0 && (\r\n//                 <span style={{\r\n//                   position: 'absolute',\r\n//                   top: '-5px',\r\n//                   right: '-5px',\r\n//                   backgroundColor: theme.danger,\r\n//                   color: 'white',\r\n//                   borderRadius: '50%',\r\n//                   width: '20px',\r\n//                   height: '20px',\r\n//                   fontSize: '0.75rem',\r\n//                   display: 'flex',\r\n//                   alignItems: 'center',\r\n//                   justifyContent: 'center'\r\n//                 }}>\r\n//                   {notifications.length}\r\n//                 </span>\r\n//               )}\r\n//             </button>\r\n            \r\n//             <button\r\n//               onClick={() => setDarkMode(!darkMode)}\r\n//               style={{\r\n//                 padding: '0.5rem 1rem',\r\n//                 backgroundColor: 'transparent',\r\n//                 border: `1px solid ${theme.border}`,\r\n//                 color: theme.text,\r\n//                 borderRadius: '0.25rem',\r\n//                 cursor: 'pointer'\r\n//               }}\r\n//             >\r\n//               {darkMode ? '☀️' : '🌙'}\r\n//             </button>\r\n//           </div>\r\n//         </header>\r\n\r\n//         {/* Status de connexion */}\r\n//         {wsReconnecting && (\r\n//           <div style={{\r\n//             backgroundColor: theme.warning + '20',\r\n//             border: `1px solid ${theme.warning}`,\r\n//             color: theme.warning,\r\n//             padding: '0.75rem',\r\n//             borderRadius: '0.375rem',\r\n//             marginBottom: '2rem',\r\n//             textAlign: 'center'\r\n//           }}>\r\n//             🔄 Reconnexion en cours...\r\n//           </div>\r\n//         )}\r\n\r\n//         {/* Formulaire de scan */}\r\n//         <div style={{\r\n//           backgroundColor: theme.cardBg,\r\n//           padding: '2rem',\r\n//           borderRadius: '0.5rem',\r\n//           boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\r\n//           marginBottom: '2rem',\r\n//           border: `1px solid ${theme.border}`\r\n//         }}>\r\n//           <div>\r\n//             <div style={{ marginBottom: '1rem' }}>\r\n//               <label style={{\r\n//                 display: 'block',\r\n//                 marginBottom: '0.5rem',\r\n//                 fontWeight: 'bold',\r\n//                 color: theme.text\r\n//               }}>\r\n//                 URL du repository GitHub\r\n//               </label>\r\n//               <input\r\n//                 type=\"url\"\r\n//                 value={githubUrl}\r\n//                 onChange={(e) => setGithubUrl(e.target.value)}\r\n//                 placeholder=\"https://github.com/username/repository\"\r\n//                 style={{\r\n//                   width: '100%',\r\n//                   padding: '0.75rem',\r\n//                   border: `2px solid ${theme.border}`,\r\n//                   borderRadius: '0.375rem',\r\n//                   fontSize: '1rem',\r\n//                   outline: 'none',\r\n//                   transition: 'border-color 0.2s',\r\n//                   backgroundColor: theme.cardBg,\r\n//                   color: theme.text\r\n//                 }}\r\n//                 onFocus={(e) => e.target.style.borderColor = theme.primary}\r\n//                 onBlur={(e) => e.target.style.borderColor = theme.border}\r\n//                 disabled={loading}\r\n//               />\r\n//             </div>\r\n            \r\n//             {error && (\r\n//               <div style={{\r\n//                 backgroundColor: theme.danger + '20',\r\n//                 color: theme.danger,\r\n//                 padding: '0.75rem',\r\n//                 borderRadius: '0.375rem',\r\n//                 marginBottom: '1rem',\r\n//                 fontSize: '0.875rem',\r\n//                 border: `1px solid ${theme.danger}`\r\n//               }}>\r\n//                 {error}\r\n//               </div>\r\n//             )}\r\n            \r\n//             <button\r\n//               onClick={handleScan}\r\n//               disabled={loading || !githubUrl.trim()}\r\n//               style={{\r\n//                 backgroundColor: loading ? theme.textMuted : theme.primary,\r\n//                 color: 'white',\r\n//                 padding: '0.75rem 1.5rem',\r\n//                 border: 'none',\r\n//                 borderRadius: '0.375rem',\r\n//                 fontSize: '1rem',\r\n//                 fontWeight: 'bold',\r\n//                 cursor: loading ? 'not-allowed' : 'pointer',\r\n//                 transition: 'all 0.2s',\r\n//                 display: 'flex',\r\n//                 alignItems: 'center',\r\n//                 gap: '0.5rem'\r\n//               }}\r\n//             >\r\n//               {loading ? (\r\n//                 <>\r\n//                   <span>🔄</span>\r\n//                   Démarrage du scan...\r\n//                 </>\r\n//               ) : (\r\n//                 <>\r\n//                   <span>🚀</span>\r\n//                   Lancer le scan\r\n//                 </>\r\n//               )}\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* Scan en cours */}\r\n//         {currentScan && (\r\n//           <>\r\n//             <ScanStatus scan={currentScan} />\r\n//             {currentScan.status === 'completed' && currentScan.results && (\r\n//               <ScanResults scan={currentScan} />\r\n//             )}\r\n//           </>\r\n//         )}\r\n\r\n//         {/* Contrôles de l'historique */}\r\n//         {scans.length > 0 && (\r\n//           <>\r\n//             <div style={{\r\n//               display: 'flex',\r\n//               justifyContent: 'space-between',\r\n//               alignItems: 'center',\r\n//               marginBottom: '1rem',\r\n//               flexWrap: 'wrap',\r\n//               gap: '1rem'\r\n//             }}>\r\n//               <h2 style={{ color: theme.text, margin: 0 }}>\r\n//                 📋 Historique des scans ({filteredScans.length})\r\n//               </h2>\r\n              \r\n//               <div style={{ display: 'flex', gap: '1rem', alignItems: 'center', flexWrap: 'wrap' }}>\r\n//                 <input\r\n//                   type=\"text\"\r\n//                   placeholder=\"Rechercher...\"\r\n//                   value={searchTerm}\r\n//                   onChange={(e) => setSearchTerm(e.target.value)}\r\n//                   style={{\r\n//                     padding: '0.5rem',\r\n//                     border: `1px solid ${theme.border}`,\r\n//                     borderRadius: '0.25rem',\r\n//                     backgroundColor: theme.cardBg,\r\n//                     color: theme.text,\r\n//                     width: '200px'\r\n//                   }}\r\n//                 />\r\n                \r\n//                 <select\r\n//                   value={filterStatus}\r\n//                   onChange={(e) => setFilterStatus(e.target.value)}\r\n//                   style={{\r\n//                     padding: '0.5rem',\r\n//                     border: `1px solid ${theme.border}`,\r\n//                     borderRadius: '0.25rem',\r\n//                     backgroundColor: theme.cardBg,\r\n//                     color: theme.text\r\n//                   }}\r\n//                 >\r\n//                   <option value=\"all\">Tous les statuts</option>\r\n//                   <option value=\"completed\">Terminés</option>\r\n//                   <option value=\"failed\">Échoués</option>\r\n//                   <option value=\"running\">En cours</option>\r\n//                 </select>\r\n                \r\n//                 <button\r\n//                   onClick={exportScans}\r\n//                   style={{\r\n//                     padding: '0.5rem 1rem',\r\n//                     backgroundColor: theme.success,\r\n//                     color: 'white',\r\n//                     border: 'none',\r\n//                     borderRadius: '0.25rem',\r\n//                     cursor: 'pointer',\r\n//                     fontSize: '0.875rem'\r\n//                   }}\r\n//                 >\r\n//                   📥 Exporter\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n\r\n//             {/* Actions de sélection multiple */}\r\n//             {filteredScans.length > 0 && (\r\n//               <div style={{\r\n//                 backgroundColor: theme.cardBg,\r\n//                 padding: '1rem',\r\n//                 borderRadius: '0.375rem',\r\n//                 marginBottom: '1rem',\r\n//                 border: `1px solid ${theme.border}`,\r\n//                 display: 'flex',\r\n//                 justifyContent: 'space-between',\r\n//                 alignItems: 'center',\r\n//                 flexWrap: 'wrap',\r\n//                 gap: '1rem'\r\n//               }}>\r\n//                 <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>\r\n//                   <span style={{ color: theme.textMuted, fontSize: '0.875rem' }}>\r\n//                     {selectedScansForDeletion.size} scan(s) sélectionné(s)\r\n//                   </span>\r\n//                   <button\r\n//                     onClick={selectedScansForDeletion.size === filteredScans.length ? deselectAllScans : selectAllScans}\r\n//                     style={{\r\n//                       padding: '0.25rem 0.75rem',\r\n//                       backgroundColor: 'transparent',\r\n//                       border: `1px solid ${theme.primary}`,\r\n//                       color: theme.primary,\r\n//                       borderRadius: '0.25rem',\r\n//                       cursor: 'pointer',\r\n//                       fontSize: '0.75rem'\r\n//                     }}\r\n//                   >\r\n//                     {selectedScansForDeletion.size === filteredScans.length ? 'Désélectionner tout' : 'Sélectionner tout'}\r\n//                   </button>\r\n//                 </div>\r\n                \r\n//                 {selectedScansForDeletion.size > 0 && (\r\n//                   <button\r\n//                     onClick={() => setShowDeleteConfirm('multiple')}\r\n//                     disabled={Array.from(selectedScansForDeletion).some(id => deletingScans.has(id))}\r\n//                     style={{\r\n//                       padding: '0.5rem 1rem',\r\n//                       backgroundColor: theme.danger,\r\n//                       color: 'white',\r\n//                       border: 'none',\r\n//                       borderRadius: '0.25rem',\r\n//                       cursor: selectedScansForDeletion.size === 0 ? 'not-allowed' : 'pointer',\r\n//                       fontSize: '0.875rem',\r\n//                       opacity: Array.from(selectedScansForDeletion).some(id => deletingScans.has(id)) ? 0.5 : 1\r\n//                     }}\r\n//                   >\r\n//                     🗑️ Supprimer la sélection ({selectedScansForDeletion.size})\r\n//                   </button>\r\n//                 )}\r\n//               </div>\r\n//             )}\r\n\r\n//             {/* Liste des scans */}\r\n//             <div style={{ display: 'grid', gap: '1rem' }}>\r\n//               {filteredScans.slice(0, 20).map((scan, index) => {\r\n//                 const totalVulns = scan.results ? \r\n//                   (scan.results.critical || 0) + (scan.results.high || 0) + (scan.results.medium || 0) + (scan.results.low || 0) : 0;\r\n//                 const isDeleting = deletingScans.has(scan.id);\r\n//                 const isSelected = selectedScansForDeletion.has(scan.id);\r\n                \r\n//                 return (\r\n//                   <div\r\n//                     key={scan.id || index}\r\n//                     style={{\r\n//                       backgroundColor: theme.cardBg,\r\n//                       padding: '1rem',\r\n//                       borderRadius: '0.375rem',\r\n//                       boxShadow: '0 1px 3px rgba(0,0,0,0.1)',\r\n//                       display: 'flex',\r\n//                       justifyContent: 'space-between',\r\n//                       alignItems: 'center',\r\n//                       border: `2px solid ${isSelected ? theme.primary : theme.border}`,\r\n//                       transition: 'all 0.2s ease',\r\n//                       opacity: isDeleting ? 0.5 : 1,\r\n//                       cursor: isDeleting ? 'not-allowed' : 'pointer'\r\n//                     }}\r\n//                   >\r\n//                     <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', flex: 1 }}>\r\n//                       <input\r\n//                         type=\"checkbox\"\r\n//                         checked={isSelected}\r\n//                         onChange={() => !isDeleting && toggleScanSelection(scan.id)}\r\n//                         disabled={isDeleting}\r\n//                         style={{\r\n//                           width: '1.25rem',\r\n//                           height: '1.25rem',\r\n//                           cursor: isDeleting ? 'not-allowed' : 'pointer'\r\n//                         }}\r\n//                       />\r\n                      \r\n//                       <div \r\n//                         onClick={() => !isDeleting && setSelectedScan(scan)}\r\n//                         style={{ flex: 1, cursor: isDeleting ? 'not-allowed' : 'pointer' }}\r\n//                       >\r\n//                         <h4 style={{ margin: '0 0 0.25rem 0', color: theme.text }}>\r\n//                           {scan.repository}\r\n//                         </h4>\r\n//                         <p style={{ margin: 0, color: theme.textMuted, fontSize: '0.875rem' }}>\r\n//                           {new Date(scan.completedAt || scan.startTime).toLocaleString('fr-FR')}\r\n//                         </p>\r\n//                       </div>\r\n//                     </div>\r\n                    \r\n//                     <div style={{\r\n//                       display: 'flex',\r\n//                       alignItems: 'center',\r\n//                       gap: '1rem'\r\n//                     }}>\r\n//                       {scan.results && (\r\n//                         <div style={{ \r\n//                           fontSize: '0.875rem', \r\n//                           color: totalVulns > 0 ? theme.danger : theme.success,\r\n//                           fontWeight: 'bold'\r\n//                         }}>\r\n//                           {totalVulns} vulns\r\n//                         </div>\r\n//                       )}\r\n//                       <span style={{\r\n//                         padding: '0.25rem 0.5rem',\r\n//                         backgroundColor: scan.status === 'completed' ? theme.success : \r\n//                                        scan.status === 'failed' ? theme.danger :\r\n//                                        scan.status === 'running' ? theme.primary : theme.textMuted,\r\n//                         color: 'white',\r\n//                         borderRadius: '0.25rem',\r\n//                         fontSize: '0.75rem'\r\n//                       }}>\r\n//                         {scan.status}\r\n//                       </span>\r\n                      \r\n//                       <button\r\n//                         onClick={(e) => {\r\n//                           e.stopPropagation();\r\n//                           rerunScan(scan.id);\r\n//                         }}\r\n//                         disabled={isDeleting}\r\n//                         style={{\r\n//                           padding: '0.25rem 0.5rem',\r\n//                           backgroundColor: 'transparent',\r\n//                           border: `1px solid ${theme.primary}`,\r\n//                           color: theme.primary,\r\n//                           borderRadius: '0.25rem',\r\n//                           cursor: isDeleting ? 'not-allowed' : 'pointer',\r\n//                           fontSize: '0.75rem',\r\n//                           opacity: isDeleting ? 0.5 : 1\r\n//                         }}\r\n//                         title=\"Relancer le scan\"\r\n//                       >\r\n//                         ↻\r\n//                       </button>\r\n                      \r\n//                       <button\r\n//                         onClick={(e) => {\r\n//                           e.stopPropagation();\r\n//                           setShowDeleteConfirm(scan.id);\r\n//                         }}\r\n//                         disabled={isDeleting}\r\n//                         style={{\r\n//                           padding: '0.25rem 0.5rem',\r\n//                           backgroundColor: 'transparent',\r\n//                           border: `1px solid ${theme.danger}`,\r\n//                           color: theme.danger,\r\n//                           borderRadius: '0.25rem',\r\n//                           cursor: isDeleting ? 'not-allowed' : 'pointer',\r\n//                           fontSize: '0.75rem',\r\n//                           opacity: isDeleting ? 0.5 : 1\r\n//                         }}\r\n//                         title=\"Supprimer le scan\"\r\n//                       >\r\n//                         {isDeleting ? '⏳' : '🗑️'}\r\n//                       </button>\r\n//                     </div>\r\n//                   </div>\r\n//                 );\r\n//               })}\r\n//             </div>\r\n//           </>\r\n//         )}\r\n//       </div>\r\n\r\n//       {/* Modal de détails */}\r\n//       {selectedScan && (\r\n//         <ScanDetailsModal \r\n//           scan={selectedScan} \r\n//           onClose={() => setSelectedScan(null)} \r\n//         />\r\n//       )}\r\n\r\n//       {/* Modal de confirmation de suppression */}\r\n//       {showDeleteConfirm && (\r\n//         <DeleteConfirmModal\r\n//           scanId={showDeleteConfirm === 'multiple' ? null : showDeleteConfirm}\r\n//           scanIds={showDeleteConfirm === 'multiple' ? Array.from(selectedScansForDeletion) : null}\r\n//           onConfirm={showDeleteConfirm === 'multiple' ? deleteSelectedScans : () => deleteScan(showDeleteConfirm)}\r\n//           onCancel={() => setShowDeleteConfirm(null)}\r\n//         />\r\n//       )}\r\n\r\n//       <style>\r\n//         {`\r\n//           @keyframes pulse {\r\n//             0%, 100% { opacity: 1; }\r\n//             50% { opacity: 0.5; }\r\n//           }\r\n          \r\n//           @keyframes slideIn {\r\n//             from {\r\n//               transform: translateX(100%);\r\n//               opacity: 0;\r\n//             }\r\n//             to {\r\n//               transform: translateX(0);\r\n//               opacity: 1;\r\n//             }\r\n//           }\r\n//         `}\r\n//       </style>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}