name: Security Scan Pipeline

on:
  workflow_dispatch:
    inputs:
      target_repo:
        description: 'GitHub repository URL or owner/repo to scan'
        required: true
        type: string
      scan_id:
        description: 'Unique scan identifier'
        required: true
        type: string
      callback_url:
        description: 'Callback URL for results'
        required: true
        type: string

jobs:
  security-scan:
    runs-on: ubuntu-latest
    env:
      TARGET_REPO: ${{ inputs.target_repo }}
      SCAN_ID: ${{ inputs.scan_id }}
      CALLBACK_URL: ${{ inputs.callback_url }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    steps:
    - name: 🧭 Init & Normalize Input
      id: init
      shell: bash
      run: |
        echo "START_TS=$(date +%s)" >> "$GITHUB_ENV"

        # Strip protocol and trailing .git if present
        REPO_IN="${TARGET_REPO}"
        REPO_PATH="${REPO_IN#https://github.com/}"
        REPO_PATH="${REPO_PATH%.git}"

        echo "REPO_PATH=$REPO_PATH" >> "$GITHUB_ENV"
        echo "Normalized repository: $REPO_PATH"

        if ! echo "$REPO_PATH" | grep -Eq '^[^/]+/[^/]+$'; then
          echo "::warning::Input 'target_repo' should be a GitHub URL or 'owner/repo'. Parsed value: '$REPO_PATH'"
        fi

    - name: 🔧 Base Tools
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl ca-certificates wget apt-transport-https gnupg lsb-release

    - name: 📥 Checkout (actions/checkout)
      id: checkout1
      uses: actions/checkout@v4
      with:
        repository: ${{ env.REPO_PATH }}
        token: ${{ env.GH_TOKEN }}
        path: target-repo
        fetch-depth: 0
      continue-on-error: true

    - name: 📥 Checkout Fallback (git clone)
      if: steps.checkout1.outcome == 'failure'
      shell: bash
      run: |
        echo "Fallback cloning..."
        if [ -n "$GH_TOKEN" ]; then
          GIT_ASKPASS_SCRIPT="$(mktemp)"
          cat > "$GIT_ASKPASS_SCRIPT" <<'EOF'
          #!/usr/bin/env bash
          echo "$GITHUB_TOKEN"
          EOF
          chmod +x "$GIT_ASKPASS_SCRIPT"
          GIT_ASKPASS="$GIT_ASKPASS_SCRIPT" GITHUB_TOKEN="$GH_TOKEN" \
            git clone "https://github.com/${REPO_PATH}" target-repo --depth 1 || true
          rm -f "$GIT_ASKPASS_SCRIPT"
        else
          git clone "https://github.com/${REPO_PATH}" target-repo --depth 1 || true
        fi

    - name: 🔍 Repository Analysis
      id: repo_analysis
      shell: bash
      run: |
        if [ -d "target-repo/.git" ]; then
          echo "repo_cloned=true" >> "$GITHUB_OUTPUT"
          echo "✅ Repository cloned."
          echo "Languages (sample):"
          find target-repo -type f \( -name "*.js" -o -name "*.ts" -o -name "*.py" -o -name "*.java" -o -name "*.go" -o -name "*.rb" -o -name "*.php" -o -name "*.cs" \) | head -10 || true
          echo "Package manifests:"
          ls -la target-repo | grep -E "(package\.json|requirements\.txt|Gemfile|pom\.xml|go\.mod|composer\.json)" || echo "None found"
        else
          echo "repo_cloned=false" >> "$GITHUB_OUTPUT"
          echo "⚠️ Clone failed; will run remote scans when possible."
        fi

    - name: 🛡️ Install Trivy
      run: |
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy
        trivy --version

    - name: 📊 Trivy - Filesystem Scans
      id: trivy_fs
      if: steps.repo_analysis.outputs.repo_cloned == 'true'
      shell: bash
      working-directory: target-repo
      run: |
        echo "=== Trivy Filesystem ==="
        trivy fs --format json --output ../trivy-fs-results.json . || echo "Trivy fs completed with warnings"
        trivy fs --scanners secret --format json --output ../trivy-secrets-results.json . || echo "Trivy secrets completed with warnings"
        trivy fs --scanners config --format json --output ../trivy-config-results.json . || echo "Trivy config completed with warnings"

    - name: 📊 Trivy - Remote Repo Scan (Fallback)
      id: trivy_repo
      if: steps.repo_analysis.outputs.repo_cloned != 'true'
      shell: bash
      run: |
        echo "=== Trivy Repo ==="
        if [ -n "$GH_TOKEN" ]; then
          trivy repo --format json --output trivy-repo-results.json --token "$GH_TOKEN" "https://github.com/${REPO_PATH}" || echo "Trivy repo completed with warnings"
        else
          trivy repo --format json --output trivy-repo-results.json "https://github.com/${REPO_PATH}" || echo "Trivy repo completed with warnings"
        fi

    - name: 🔐 Setup Node.js & Snyk
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 🛠️ Install Snyk CLI
      run: |
        npm i -g snyk
        snyk --version

    - name: 🔑 Snyk Auth (if token)
      if: env.SNYK_TOKEN != ''
      run: snyk auth "$SNYK_TOKEN"

    - name: 📦 Optional Dependency Install (best effort)
      if: steps.repo_analysis.outputs.repo_cloned == 'true'
      shell: bash
      working-directory: target-repo
      continue-on-error: true
      run: |
        if [ -f "package.json" ]; then
          echo "Installing Node deps..."
          npm ci || npm install || true
        fi
        if [ -f "requirements.txt" ]; then
          echo "Installing Python deps..."
          python3 -m pip install -U pip || true
          pip3 install -r requirements.txt || true
        fi
        if [ -f "pom.xml" ]; then
          echo "Preparing Java build (no tests)..."
          sudo apt-get update && sudo apt-get install -y maven || true
          mvn -q -DskipTests package || true
        fi

    - name: 📊 Snyk - Dependency Scan
      id: snyk_deps
      if: steps.repo_analysis.outputs.repo_cloned == 'true'
      shell: bash
      working-directory: target-repo
      continue-on-error: true
      run: |
        if [ -f "package.json" ] || [ -f "requirements.txt" ] || [ -f "pom.xml" ]; then
          echo "Running Snyk dependency scan..."
          snyk test --json > ../snyk-deps-results.json || echo "Snyk deps scan finished"
        else
          echo '{"vulnerabilities": [], "summary": {"total": 0}}' > ../snyk-deps-results.json
        fi

    - name: 📊 Snyk - Code Scan
      id: snyk_code
      if: steps.repo_analysis.outputs.repo_cloned == 'true' && env.SNYK_TOKEN != ''
      shell: bash
      working-directory: target-repo
      continue-on-error: true
      run: |
        snyk code test --json > ../snyk-code-results.json || echo "Snyk code scan finished"

    - name: 📊 Snyk - IaC Scan
      id: snyk_iac
      if: steps.repo_analysis.outputs.repo_cloned == 'true' && env.SNYK_TOKEN != ''
      shell: bash
      working-directory: target-repo
      continue-on-error: true
      run: |
        snyk iac test --json > ../snyk-iac-results.json || echo "Snyk IaC scan finished"

    - name: 🔄 Process Results
      id: process
      shell: bash
      run: |
        CRITICAL=0; HIGH=0; MEDIUM=0; LOW=0; TOTAL=0; FILES=0

        echo "Processing Trivy JSON..."
        for file in trivy-*.json; do
          [ -f "$file" ] || continue
          C=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' "$file" 2>/dev/null || echo 0)
          H=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' "$file" 2>/dev/null || echo 0)
          M=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' "$file" 2>/dev/null || echo 0)
          L=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' "$file" 2>/dev/null || echo 0)
          CRITICAL=$((CRITICAL+C)); HIGH=$((HIGH+H)); MEDIUM=$((MEDIUM+M)); LOW=$((LOW+L))
        done

        echo "Processing Snyk JSON..."
        for file in snyk-*.json; do
          [ -f "$file" ] || continue
          C=$(jq '[.vulnerabilities[]? | select(.severity=="critical")] | length' "$file" 2>/dev/null || echo 0)
          H=$(jq '[.vulnerabilities[]? | select(.severity=="high")] | length' "$file" 2>/dev/null || echo 0)
          M=$(jq '[.vulnerabilities[]? | select(.severity=="medium")] | length' "$file" 2>/dev/null || echo 0)
          L=$(jq '[.vulnerabilities[]? | select(.severity=="low")] | length' "$file" 2>/dev/null || echo 0)
          CRITICAL=$((CRITICAL+C)); HIGH=$((HIGH+H)); MEDIUM=$((MEDIUM+M)); LOW=$((LOW+L))
        done

        TOTAL=$((CRITICAL+HIGH+MEDIUM+LOW))
        [ -d target-repo ] && FILES=$(find target-repo -type f | wc -l) || FILES=0

        echo "critical=$CRITICAL" >> "$GITHUB_OUTPUT"
        echo "high=$HIGH"       >> "$GITHUB_OUTPUT"
        echo "medium=$MEDIUM"   >> "$GITHUB_OUTPUT"
        echo "low=$LOW"         >> "$GITHUB_OUTPUT"
        echo "total=$TOTAL"     >> "$GITHUB_OUTPUT"
        echo "files=$FILES"     >> "$GITHUB_OUTPUT"

    - name: 📋 Generate Report
      id: report
      shell: bash
      run: |
        END_TS=$(date +%s)
        DURATION=$((END_TS - START_TS))
        echo "DURATION=$DURATION" >> "$GITHUB_ENV"

        cat > scan-report.json << EOF
        {
          "scan_id": "${SCAN_ID}",
          "target_repository": "${TARGET_REPO}",
          "normalized_repository": "${REPO_PATH}",
          "scan_timestamp_utc": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "scan_duration_seconds": ${DURATION},
          "summary": {
            "critical": ${{ steps.process.outputs.critical }},
            "high": ${{ steps.process.outputs.high }},
            "medium": ${{ steps.process.outputs.medium }},
            "low": ${{ steps.process.outputs.low }},
            "total_vulnerabilities": ${{ steps.process.outputs.total }},
            "scanned_files": ${{ steps.process.outputs.files }}
          },
          "tools_used": ["Trivy","Snyk"],
          "scan_types": ["dependency_vulnerabilities","filesystem_scan","secrets_detection","configuration_issues"]
        }
        EOF

        echo "Report generated:"
        cat scan-report.json

    - name: 📤 Send Results to Backend (with retries)
      shell: bash
      run: |
        STATUS="completed"
        END_TS=$(date +%s)
        DURATION=$((END_TS - START_TS))
        JSON_PAYLOAD=$(jq -n \
          --arg scan_id "$SCAN_ID" \
          --arg status "$STATUS" \
          --arg repo "$TARGET_REPO" \
          --arg norm_repo "$REPO_PATH" \
          --arg ts "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          --arg duration "${DURATION}s" \
          --argjson critical ${{ steps.process.outputs.critical }} \
          --argjson high ${{ steps.process.outputs.high }} \
          --argjson medium ${{ steps.process.outputs.medium }} \
          --argjson low ${{ steps.process.outputs.low }} \
          --argjson total ${{ steps.process.outputs.total }} \
          --argjson files ${{ steps.process.outputs.files }} \
          --arg tools '["Trivy","Snyk"]' \
          '{
            scan_id: $scan_id,
            status: $status,
            results: {
              critical: $critical,
              high: $high,
              medium: $medium,
              low: $low,
              total: $total,
              scanned_files: $files,
              scan_duration: $duration,
              timestamp: $ts,
              tools: ["Trivy","Snyk"],
              repository: $repo,
              normalized_repository: $norm_repo
            }
          }')

        echo "$JSON_PAYLOAD" | jq .

        curl --fail --retry 5 --retry-connrefused --retry-delay 2 --max-time 20 \
          -H "Content-Type: application/json" \
          -d "$JSON_PAYLOAD" \
          -X POST "$CALLBACK_URL" || echo "⚠️ Callback failed"

    - name: 📊 Upload Scan Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results-${{ env.SCAN_ID }}
        path: |
          *.json
          target-repo/**/snyk*.sarif
        retention-days: 30

    - name: ✅ Done
      shell: bash
      run: |
        echo "Scan ID: $SCAN_ID"
        echo "Critical:  ${{ steps.process.outputs.critical }}"
        echo "High:      ${{ steps.process.outputs.high }}"
        echo "Medium:    ${{ steps.process.outputs.medium }}"
        echo "Low:       ${{ steps.process.outputs.low }}"
        echo "Total:     ${{ steps.process.outputs.total }}"
        echo "Files:     ${{ steps.process.outputs.files }}"
        echo "Duration:  ${DURATION}s"
